version: '3.4'

networks:
  dataretrieval-network:
    driver: bridge

volumes:
  redisdata:
  dataretrieval_data:

services:
  #dataretrieval.api
  dataretrieval.webapi:
    image: dataretrievalwebapi
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_HTTP_PORTS=${DATA_RETRIEVAL_PORT}
    ports:
      - "${DATA_RETRIEVAL_PORT}:${DATA_RETRIEVAL_PORT}"
    build:
      context: .
      dockerfile: src/Services/DataRetrieval/DataRetrieval.WebAPI/Dockerfile
    healthcheck:
      test: curl --fail http://localhost:${DATA_RETRIEVAL_PORT}/Health || exit 1
      interval: 60s
      retries: 5
      start_period: 10s
      timeout: 10s
    networks:
      - dataretrieval-network
    volumes:
      - ./data:/data
  
  #redis
  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    networks:
      - dataretrieval-network
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass redis_pwd" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user redis_user on >redis_user_pwd ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_pwd", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  dataretrieval_db:
    image: postgres
    container_name: dataretrieval_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    expose:       
      - "${POSTGRES_PORT}"
    command: -p ${POSTGRES_PORT}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - dataretrieval-network
    volumes:
      - dataretrieval_data:/var/lib/postgresql